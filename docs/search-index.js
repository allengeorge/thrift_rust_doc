var searchIndex = {};
searchIndex["thrift"] = {"doc":"Rust runtime library for the Apache Thrift RPC system.","items":[[3,"TransportError","thrift","Information about I/O errors.",null,null],[12,"kind","","I/O error variant.",0,null],[12,"message","","Human-readable error message.",0,null],[3,"ProtocolError","","Information about errors that occur in the runtime library.",null,null],[12,"kind","","Protocol error variant.",1,null],[12,"message","","Human-readable error message.",1,null],[3,"ApplicationError","","Information about errors in auto-generated code or in user-implemented\nservice handlers.",null,null],[12,"kind","","Application error variant.",2,null],[12,"message","","Human-readable error message.",2,null],[4,"Error","","Error type returned by all runtime library functions.",null,null],[13,"Transport","","Errors encountered while operating on I/O channels.",3,null],[13,"Protocol","","Errors encountered during runtime-library processing.",3,null],[13,"Application","","Errors encountered within auto-generated code, or when incoming\nor outgoing messages violate the Thrift spec.",3,null],[13,"User","","IDL-defined exception structs.",3,null],[4,"TransportErrorKind","","I/O error categories.",null,null],[13,"Unknown","","Catch-all I/O error.",4,null],[13,"NotOpen","","An I/O operation was attempted when the transport channel was not open.",4,null],[13,"AlreadyOpen","","The transport channel cannot be opened because it was opened previously.",4,null],[13,"TimedOut","","An I/O operation timed out.",4,null],[13,"EndOfFile","","A read could not complete because no bytes were available.",4,null],[13,"NegativeSize","","An invalid (buffer/message) size was requested or received.",4,null],[13,"SizeLimit","","Too large a buffer or message size was requested or received.",4,null],[4,"ProtocolErrorKind","","Runtime library error categories.",null,null],[13,"Unknown","","Catch-all runtime-library error.",5,null],[13,"InvalidData","","An invalid argument was supplied to a library function, or invalid data\nwas received from a Thrift endpoint.",5,null],[13,"NegativeSize","","An invalid size was received in an encoded field.",5,null],[13,"SizeLimit","","Thrift message or field was too long.",5,null],[13,"BadVersion","","Unsupported or unknown Thrift protocol version.",5,null],[13,"NotImplemented","","Unsupported Thrift protocol, server or field type.",5,null],[13,"DepthLimit","","Reached the maximum nested depth to which an encoded Thrift field could\nbe skipped.",5,null],[4,"ApplicationErrorKind","","Auto-generated or user-implemented code error categories.",null,null],[13,"Unknown","","Catch-all application error.",6,null],[13,"UnknownMethod","","Made service call to an unknown service method.",6,null],[13,"InvalidMessageType","","Received an unknown Thrift message type. That is, not one of the\n`thrift::protocol::TMessageType` variants.",6,null],[13,"WrongMethodName","","Method name in a service reply does not match the name of the\nreceiving service method.",6,null],[13,"BadSequenceId","","Received an out-of-order Thrift message.",6,null],[13,"MissingResult","","Service reply is missing required fields.",6,null],[13,"InternalError","","Auto-generated code failed unexpectedly.",6,null],[13,"ProtocolError","","Thrift protocol error. When possible use `Error::ProtocolError` with a\nspecific `ProtocolErrorKind` instead.",6,null],[13,"InvalidTransform","","*Unknown*. Included only for compatibility with existing Thrift implementations.",6,null],[13,"InvalidProtocol","","Thrift endpoint requested, or is using, an unsupported encoding.",6,null],[13,"UnsupportedClientType","","Thrift endpoint requested, or is using, an unsupported auto-generated client type.",6,null],[5,"new_transport_error","","Create a new `Error` instance of type `Transport` that wraps a\n`TransportError`.",null,{"inputs":[{"name":"transporterrorkind"},{"name":"s"}],"output":{"name":"error"}}],[5,"new_protocol_error","","Create a new `Error` instance of type `Protocol` that wraps a\n`ProtocolError`.",null,{"inputs":[{"name":"protocolerrorkind"},{"name":"s"}],"output":{"name":"error"}}],[5,"new_application_error","","Create a new `Error` instance of type `Application` that wraps an\n`ApplicationError`.",null,{"inputs":[{"name":"applicationerrorkind"},{"name":"s"}],"output":{"name":"error"}}],[0,"protocol","","Types used to send and receive primitives between a Thrift client and server.",null,null],[3,"TBinaryInputProtocol","thrift::protocol","Read messages encoded in the Thrift simple binary encoding.",null,null],[3,"TBinaryInputProtocolFactory","","Factory for creating instances of `TBinaryInputProtocol`.",null,null],[3,"TBinaryOutputProtocol","","Write messages using the Thrift simple binary encoding.",null,null],[3,"TBinaryOutputProtocolFactory","","Factory for creating instances of `TBinaryOutputProtocol`.",null,null],[3,"TCompactInputProtocol","","Read messages encoded in the Thrift compact protocol.",null,null],[3,"TCompactInputProtocolFactory","","Factory for creating instances of `TCompactInputProtocol`.",null,null],[3,"TCompactOutputProtocol","","Write messages using the Thrift compact protocol.",null,null],[3,"TCompactOutputProtocolFactory","","Factory for creating instances of `TCompactOutputProtocol`.",null,null],[3,"TMultiplexedOutputProtocol","","`TOutputProtocol` that prefixes the service name to all outgoing Thrift\nmessages.",null,null],[3,"TStoredInputProtocol","","`TInputProtocol` required to use a `TMultiplexedProcessor`.",null,null],[3,"TMessageIdentifier","","Thrift message identifier.",null,null],[12,"name","","Service call the message is associated with.",7,null],[12,"message_type","","Message type.",7,null],[12,"sequence_number","","Ordered sequence number identifying the message.",7,null],[3,"TStructIdentifier","","Thrift struct identifier.",null,null],[12,"name","","Name of the encoded Thrift struct.",8,null],[3,"TFieldIdentifier","","Thrift field identifier.",null,null],[12,"name","","Name of the Thrift field.",9,null],[12,"field_type","","Field type.",9,null],[12,"id","","Thrift field id.",9,null],[3,"TListIdentifier","","Thrift list identifier.",null,null],[12,"element_type","","Type of the elements in the list.",10,null],[12,"size","","Number of elements in the list.",10,null],[3,"TSetIdentifier","","Thrift set identifier.",null,null],[12,"element_type","","Type of the elements in the set.",11,null],[12,"size","","Number of elements in the set.",11,null],[3,"TMapIdentifier","","Thrift map identifier.",null,null],[12,"key_type","","Map key type.",12,null],[12,"value_type","","Map value type.",12,null],[12,"size","","Number of entries in the map.",12,null],[4,"TMessageType","","Thrift message types.",null,null],[13,"Call","","Service-call request.",13,null],[13,"Reply","","Service-call response.",13,null],[13,"Exception","","Unexpected error in the remote service.",13,null],[13,"OneWay","","One-way service-call request (no response is expected).",13,null],[4,"TType","","Thrift struct-field types.",null,null],[13,"Stop","","Indicates that there are no more serialized fields in this Thrift struct.",14,null],[13,"Void","","Void (`()`) field.",14,null],[13,"Bool","","Boolean.",14,null],[13,"I08","","Signed 8-bit int.",14,null],[13,"Double","","Double-precision number.",14,null],[13,"I16","","Signed 16-bit int.",14,null],[13,"I32","","Signed 32-bit int.",14,null],[13,"I64","","Signed 64-bit int.",14,null],[13,"String","","UTF-8 string.",14,null],[13,"Utf7","","UTF-7 string. *Unsupported*.",14,null],[13,"Struct","","Thrift struct.",14,null],[13,"Map","","Map.",14,null],[13,"Set","","Set.",14,null],[13,"List","","List.",14,null],[13,"Utf8","","UTF-8 string.",14,null],[13,"Utf16","","UTF-16 string. *Unsupported*.",14,null],[5,"verify_expected_sequence_number","","Compare the expected message sequence number `expected` with the received\nmessage sequence number `actual`.",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[5,"verify_expected_service_call","","Compare the expected service-call name `expected` with the received\nservice-call name `actual`.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"verify_expected_message_type","","Compare the expected message type `expected` with the received message type\n`actual`.",null,{"inputs":[{"name":"tmessagetype"},{"name":"tmessagetype"}],"output":{"name":"result"}}],[5,"verify_required_field_exists","","Check if a required Thrift struct field exists.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[5,"field_id","","Extract the field id from a Thrift field identifier.",null,{"inputs":[{"name":"tfieldidentifier"}],"output":{"name":"result"}}],[11,"new","","Create a `TBinaryInputProtocol` that reads bytes from `transport`.",15,{"inputs":[{"name":"rc"},{"name":"bool"}],"output":{"name":"tbinaryinputprotocol"}}],[11,"read_message_begin","","",15,null],[11,"read_message_end","","",15,null],[11,"read_struct_begin","","",15,null],[11,"read_struct_end","","",15,null],[11,"read_field_begin","","",15,null],[11,"read_field_end","","",15,null],[11,"read_bytes","","",15,null],[11,"read_bool","","",15,null],[11,"read_i8","","",15,null],[11,"read_i16","","",15,null],[11,"read_i32","","",15,null],[11,"read_i64","","",15,null],[11,"read_double","","",15,null],[11,"read_string","","",15,null],[11,"read_list_begin","","",15,null],[11,"read_list_end","","",15,null],[11,"read_set_begin","","",15,null],[11,"read_set_end","","",15,null],[11,"read_map_begin","","",15,null],[11,"read_map_end","","",15,null],[11,"read_byte","","",15,null],[11,"default","","",16,{"inputs":[],"output":{"name":"tbinaryinputprotocolfactory"}}],[11,"new","","Create a `TBinaryInputProtocolFactory`.",16,{"inputs":[],"output":{"name":"tbinaryinputprotocolfactory"}}],[11,"create","","",16,null],[11,"new","","Create a `TBinaryOutputProtocol` that writes bytes to `transport`.",17,{"inputs":[{"name":"rc"},{"name":"bool"}],"output":{"name":"tbinaryoutputprotocol"}}],[11,"write_message_begin","","",17,null],[11,"write_message_end","","",17,null],[11,"write_struct_begin","","",17,null],[11,"write_struct_end","","",17,null],[11,"write_field_begin","","",17,null],[11,"write_field_end","","",17,null],[11,"write_field_stop","","",17,null],[11,"write_bytes","","",17,null],[11,"write_bool","","",17,null],[11,"write_i8","","",17,null],[11,"write_i16","","",17,null],[11,"write_i32","","",17,null],[11,"write_i64","","",17,null],[11,"write_double","","",17,null],[11,"write_string","","",17,null],[11,"write_list_begin","","",17,null],[11,"write_list_end","","",17,null],[11,"write_set_begin","","",17,null],[11,"write_set_end","","",17,null],[11,"write_map_begin","","",17,null],[11,"write_map_end","","",17,null],[11,"flush","","",17,null],[11,"write_byte","","",17,null],[11,"default","","",18,{"inputs":[],"output":{"name":"tbinaryoutputprotocolfactory"}}],[11,"new","","Create a `TBinaryOutputProtocolFactory`.",18,{"inputs":[],"output":{"name":"tbinaryoutputprotocolfactory"}}],[11,"create","","",18,null],[11,"new","","Create a `TCompactInputProtocol` that reads bytes from `transport`.",19,{"inputs":[{"name":"rc"}],"output":{"name":"tcompactinputprotocol"}}],[11,"read_message_begin","","",19,null],[11,"read_message_end","","",19,null],[11,"read_struct_begin","","",19,null],[11,"read_struct_end","","",19,null],[11,"read_field_begin","","",19,null],[11,"read_field_end","","",19,null],[11,"read_bool","","",19,null],[11,"read_bytes","","",19,null],[11,"read_i8","","",19,null],[11,"read_i16","","",19,null],[11,"read_i32","","",19,null],[11,"read_i64","","",19,null],[11,"read_double","","",19,null],[11,"read_string","","",19,null],[11,"read_list_begin","","",19,null],[11,"read_list_end","","",19,null],[11,"read_set_begin","","",19,null],[11,"read_set_end","","",19,null],[11,"read_map_begin","","",19,null],[11,"read_map_end","","",19,null],[11,"read_byte","","",19,null],[11,"default","","",20,{"inputs":[],"output":{"name":"tcompactinputprotocolfactory"}}],[11,"new","","Create a `TCompactInputProtocolFactory`.",20,{"inputs":[],"output":{"name":"tcompactinputprotocolfactory"}}],[11,"create","","",20,null],[11,"new","","Create a `TCompactOutputProtocol` that writes bytes to `transport`.",21,{"inputs":[{"name":"rc"}],"output":{"name":"tcompactoutputprotocol"}}],[11,"write_message_begin","","",21,null],[11,"write_message_end","","",21,null],[11,"write_struct_begin","","",21,null],[11,"write_struct_end","","",21,null],[11,"write_field_begin","","",21,null],[11,"write_field_end","","",21,null],[11,"write_field_stop","","",21,null],[11,"write_bool","","",21,null],[11,"write_bytes","","",21,null],[11,"write_i8","","",21,null],[11,"write_i16","","",21,null],[11,"write_i32","","",21,null],[11,"write_i64","","",21,null],[11,"write_double","","",21,null],[11,"write_string","","",21,null],[11,"write_list_begin","","",21,null],[11,"write_list_end","","",21,null],[11,"write_set_begin","","",21,null],[11,"write_set_end","","",21,null],[11,"write_map_begin","","",21,null],[11,"write_map_end","","",21,null],[11,"flush","","",21,null],[11,"write_byte","","",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"tcompactoutputprotocolfactory"}}],[11,"new","","Create a `TCompactOutputProtocolFactory`.",22,{"inputs":[],"output":{"name":"tcompactoutputprotocolfactory"}}],[11,"create","","",22,null],[11,"new","","Create a `TMultiplexedOutputProtocol` that identifies outgoing messages\nas originating from a service named `service_name` and sends them over\nthe `wrapped` `TOutputProtocol`. Outgoing messages are encoded and sent\nby `wrapped`, not by this instance.",23,{"inputs":[{"name":"str"},{"name":"box"}],"output":{"name":"tmultiplexedoutputprotocol"}}],[11,"write_message_begin","","",23,null],[11,"write_message_end","","",23,null],[11,"write_struct_begin","","",23,null],[11,"write_struct_end","","",23,null],[11,"write_field_begin","","",23,null],[11,"write_field_end","","",23,null],[11,"write_field_stop","","",23,null],[11,"write_bytes","","",23,null],[11,"write_bool","","",23,null],[11,"write_i8","","",23,null],[11,"write_i16","","",23,null],[11,"write_i32","","",23,null],[11,"write_i64","","",23,null],[11,"write_double","","",23,null],[11,"write_string","","",23,null],[11,"write_list_begin","","",23,null],[11,"write_list_end","","",23,null],[11,"write_set_begin","","",23,null],[11,"write_set_end","","",23,null],[11,"write_map_begin","","",23,null],[11,"write_map_end","","",23,null],[11,"flush","","",23,null],[11,"write_byte","","",23,null],[11,"new","","Create a `TStoredInputProtocol` that delegates all calls other than\n`TInputProtocol::read_message_begin(...)` to a `wrapped`\n`TInputProtocol`. `message_ident` is the modified message identifier -\nwith service name stripped - that will be passed to\n`wrapped.read_message_begin(...)`.",24,{"inputs":[{"name":"tinputprotocol"},{"name":"tmessageidentifier"}],"output":{"name":"tstoredinputprotocol"}}],[11,"read_message_begin","","",24,null],[11,"read_message_end","","",24,null],[11,"read_struct_begin","","",24,null],[11,"read_struct_end","","",24,null],[11,"read_field_begin","","",24,null],[11,"read_field_end","","",24,null],[11,"read_bytes","","",24,null],[11,"read_bool","","",24,null],[11,"read_i8","","",24,null],[11,"read_i16","","",24,null],[11,"read_i32","","",24,null],[11,"read_i64","","",24,null],[11,"read_double","","",24,null],[11,"read_string","","",24,null],[11,"read_list_begin","","",24,null],[11,"read_list_end","","",24,null],[11,"read_set_begin","","",24,null],[11,"read_set_end","","",24,null],[11,"read_map_begin","","",24,null],[11,"read_map_end","","",24,null],[11,"read_byte","","",24,null],[8,"TInputProtocol","","Converts a stream of bytes into Thrift identifiers, primitives,\ncontainers, or structs.",null,null],[10,"read_message_begin","","Read the beginning of a Thrift message.",25,null],[10,"read_message_end","","Read the end of a Thrift message.",25,null],[10,"read_struct_begin","","Read the beginning of a Thrift struct.",25,null],[10,"read_struct_end","","Read the end of a Thrift struct.",25,null],[10,"read_field_begin","","Read the beginning of a Thrift struct field.",25,null],[10,"read_field_end","","Read the end of a Thrift struct field.",25,null],[10,"read_bool","","Read a bool.",25,null],[10,"read_bytes","","Read a fixed-length byte array.",25,null],[10,"read_i8","","Read a word.",25,null],[10,"read_i16","","Read a 16-bit signed integer.",25,null],[10,"read_i32","","Read a 32-bit signed integer.",25,null],[10,"read_i64","","Read a 64-bit signed integer.",25,null],[10,"read_double","","Read a 64-bit float.",25,null],[10,"read_string","","Read a fixed-length string (not null terminated).",25,null],[10,"read_list_begin","","Read the beginning of a list.",25,null],[10,"read_list_end","","Read the end of a list.",25,null],[10,"read_set_begin","","Read the beginning of a set.",25,null],[10,"read_set_end","","Read the end of a set.",25,null],[10,"read_map_begin","","Read the beginning of a map.",25,null],[10,"read_map_end","","Read the end of a map.",25,null],[11,"skip","","Skip a field with type `field_type` recursively until the default\nmaximum skip depth is reached.",25,null],[11,"skip_till_depth","","Skip a field with type `field_type` recursively up to `depth` levels.",25,null],[10,"read_byte","","Read an unsigned byte.",25,null],[8,"TOutputProtocol","","Converts Thrift identifiers, primitives, containers or structs into a\nstream of bytes.",null,null],[10,"write_message_begin","","Write the beginning of a Thrift message.",26,null],[10,"write_message_end","","Write the end of a Thrift message.",26,null],[10,"write_struct_begin","","Write the beginning of a Thrift struct.",26,null],[10,"write_struct_end","","Write the end of a Thrift struct.",26,null],[10,"write_field_begin","","Write the beginning of a Thrift field.",26,null],[10,"write_field_end","","Write the end of a Thrift field.",26,null],[10,"write_field_stop","","Write a STOP field indicating that all the fields in a struct have been\nwritten.",26,null],[10,"write_bool","","Write a bool.",26,null],[10,"write_bytes","","Write a fixed-length byte array.",26,null],[10,"write_i8","","Write an 8-bit signed integer.",26,null],[10,"write_i16","","Write a 16-bit signed integer.",26,null],[10,"write_i32","","Write a 32-bit signed integer.",26,null],[10,"write_i64","","Write a 64-bit signed integer.",26,null],[10,"write_double","","Write a 64-bit float.",26,null],[10,"write_string","","Write a fixed-length string.",26,null],[10,"write_list_begin","","Write the beginning of a list.",26,null],[10,"write_list_end","","Write the end of a list.",26,null],[10,"write_set_begin","","Write the beginning of a set.",26,null],[10,"write_set_end","","Write the end of a set.",26,null],[10,"write_map_begin","","Write the beginning of a map.",26,null],[10,"write_map_end","","Write the end of a map.",26,null],[10,"flush","","Flush buffered bytes to the underlying transport.",26,null],[10,"write_byte","","Write an unsigned byte.",26,null],[8,"TInputProtocolFactory","","Helper type used by servers to create `TInputProtocol` instances for\naccepted client connections.",null,null],[10,"create","","Create a `TInputProtocol` that reads bytes from `transport`.",27,null],[8,"TOutputProtocolFactory","","Helper type used by servers to create `TOutputProtocol` instances for\naccepted client connections.",null,null],[10,"create","","Create a `TOutputProtocol` that writes bytes to `transport`.",28,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"new","","Create a `TMessageIdentifier` for a Thrift service-call named `name`\nwith message type `message_type` and sequence number `sequence_number`.",7,{"inputs":[{"name":"s"},{"name":"tmessagetype"},{"name":"i32"}],"output":{"name":"tmessageidentifier"}}],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"new","","Create a `TStructIdentifier` for a struct named `name`.",8,{"inputs":[{"name":"s"}],"output":{"name":"tstructidentifier"}}],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"new","","Create a `TFieldIdentifier` for a field named `name` with type\n`field_type` and field id `id`.",9,{"inputs":[{"name":"n"},{"name":"ttype"},{"name":"i"}],"output":{"name":"tfieldidentifier"}}],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"new","","Create a `TListIdentifier` for a list with `size` elements of type\n`element_type`.",10,{"inputs":[{"name":"ttype"},{"name":"i32"}],"output":{"name":"tlistidentifier"}}],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"new","","Create a `TSetIdentifier` for a set with `size` elements of type\n`element_type`.",11,{"inputs":[{"name":"ttype"},{"name":"i32"}],"output":{"name":"tsetidentifier"}}],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"new","","Create a `TMapIdentifier` for a map with `size` entries of type\n`key_type -&gt; value_type`.",12,{"inputs":[{"name":"k"},{"name":"v"},{"name":"i32"}],"output":{"name":"tmapidentifier"}}],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"eq","","",13,null],[11,"fmt","","",13,null],[11,"try_from","","",13,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"fmt","","",14,null],[0,"server","thrift","Types required to implement a Thrift server.",null,null],[3,"TSimpleServer","thrift::server","Single-threaded blocking Thrift socket server.",null,null],[3,"TMultiplexedProcessor","","A `TProcessor` that can demux service calls to multiple underlying\nThrift services.",null,null],[11,"new","","Create a `TSimpleServer`.",29,{"inputs":[{"name":"box"},{"name":"box"},{"name":"box"},{"name":"box"},{"name":"pr"}],"output":{"name":"tsimpleserver"}}],[11,"listen","","Listen for incoming connections on `listen_address`.",29,null],[11,"register_processor","","Register a service-specific `processor` for the service named\n`service_name`.",30,null],[11,"process","","",30,null],[8,"TProcessor","","Handles incoming Thrift messages and dispatches them to the user-defined\nhandler functions.",null,null],[10,"process","","Process a Thrift service call.",31,null],[0,"transport","thrift","Types required to send and receive bytes over an I/O channel.",null,null],[3,"TBufferedTransport","thrift::transport","Transport that communicates with endpoints using a byte stream.",null,null],[3,"TBufferedTransportFactory","","Factory for creating instances of `TBufferedTransport`",null,null],[3,"TFramedTransport","","Transport that communicates with endpoints using framed messages.",null,null],[3,"TFramedTransportFactory","","Factory for creating instances of `TFramedTransport`.",null,null],[3,"TPassThruTransport","","Proxy that wraps an inner `TTransport` and delegates all calls to it.",null,null],[12,"inner","","",32,null],[3,"TTcpTransport","","Communicate with a Thrift service over a TCP socket.",null,null],[11,"new","","Create a `TBufferedTransport` with default-sized internal read and\nwrite buffers that wraps an `inner` `TTransport`.",33,{"inputs":[{"name":"rc"}],"output":{"name":"tbufferedtransport"}}],[11,"with_capacity","","Create a `TBufferedTransport` with an internal read buffer of size\n`read_buffer_capacity` and an internal write buffer of size\n`write_buffer_capacity` that wraps an `inner` `TTransport`.",33,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"rc"}],"output":{"name":"tbufferedtransport"}}],[11,"read","","",33,null],[11,"write","","",33,null],[11,"flush","","",33,null],[11,"default","","",34,{"inputs":[],"output":{"name":"tbufferedtransportfactory"}}],[11,"new","","Create a `TBufferedTransportFactory`.",34,{"inputs":[],"output":{"name":"tbufferedtransportfactory"}}],[11,"create","","",34,null],[11,"new","","Create a `TFramedTransport` with default-sized internal read and\nwrite buffers that wraps an `inner` `TTransport`.",35,{"inputs":[{"name":"rc"}],"output":{"name":"tframedtransport"}}],[11,"with_capacity","","Create a `TFramedTransport` with an internal read buffer of size\n`read_buffer_capacity` and an internal write buffer of size\n`write_buffer_capacity` that wraps an `inner` `TTransport`.",35,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"rc"}],"output":{"name":"tframedtransport"}}],[11,"read","","",35,null],[11,"write","","",35,null],[11,"flush","","",35,null],[11,"default","","",36,{"inputs":[],"output":{"name":"tframedtransportfactory"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"tframedtransportfactory"}}],[11,"create","","",36,null],[11,"new","","Create a `TPassThruTransport` that wraps an `inner` TTransport.",32,{"inputs":[{"name":"rc"}],"output":{"name":"tpassthrutransport"}}],[11,"read","","",32,null],[11,"write","","",32,null],[11,"flush","","",32,null],[11,"default","","",37,{"inputs":[],"output":{"name":"ttcptransport"}}],[11,"new","","Create an uninitialized `TTcpTransport`.",37,{"inputs":[],"output":{"name":"ttcptransport"}}],[11,"with_stream","","Create a `TTcpTransport` that wraps an existing `TcpStream`.",37,{"inputs":[{"name":"tcpstream"}],"output":{"name":"ttcptransport"}}],[11,"open","","Connect to `remote_address`, which should have the form `host:port`.",37,null],[11,"close","","Shutdown this transport.",37,null],[11,"read","","",37,null],[11,"write","","",37,null],[11,"flush","","",37,null],[11,"drop","","",37,null],[8,"TTransport","","Identifies an I/O channel that can be used to send and receive bytes.",null,null],[8,"TTransportFactory","","Helper type used by servers to create `TTransport` instances for accepted\nclient connections.",null,null],[10,"create","","Create a `TTransport` that wraps an `inner` transport, thus creating\na transport stack.",38,null],[11,"read_application_error_from_in_protocol","thrift","Create an `ApplicationError` from its wire representation.",3,{"inputs":[{"name":"tinputprotocol"}],"output":{"name":"result"}}],[11,"write_application_error_to_out_protocol","","Convert an `ApplicationError` into its wire representation and write\nit to the remote.",3,{"inputs":[{"name":"applicationerror"},{"name":"toutputprotocol"}],"output":{"name":"result"}}],[11,"description","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"transporterror"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"protocolerror"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"applicationerror"}],"output":{"name":"self"}}],[11,"fmt","","",0,null],[11,"new","","Create a new `TransportError`.",0,{"inputs":[{"name":"transporterrorkind"},{"name":"s"}],"output":{"name":"transporterror"}}],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"fmt","","",0,null],[11,"try_from","","",4,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"fmt","","",1,null],[11,"new","","Create a new `ProtocolError`.",1,{"inputs":[{"name":"protocolerrorkind"},{"name":"s"}],"output":{"name":"protocolerror"}}],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"fmt","","",1,null],[11,"try_from","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",2,null],[11,"new","","Create a new `ApplicationError`.",2,{"inputs":[{"name":"applicationerrorkind"},{"name":"s"}],"output":{"name":"applicationerror"}}],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"fmt","","",2,null],[11,"try_from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[6,"Result","","Result type returned by all runtime library functions.",null,null],[8,"TThriftClient","","Specifies the minimum functionality an auto-generated client should provide\nto communicate with a Thrift server.",null,null],[10,"i_prot_mut","","Returns the input protocol used to read serialized Thrift messages\nfrom the Thrift server.",39,null],[10,"o_prot_mut","","Returns the output protocol used to write serialized Thrift messages\nto the Thrift server.",39,null],[10,"sequence_number","","Returns the sequence number of the last message written to the Thrift\nserver. Returns `0` if no messages have been written. Sequence\nnumbers should *never* be negative, and this method returns an `i32`\nsimply because the Thrift protocol encodes sequence numbers as `i32` on\nthe wire.",39,null],[10,"increment_sequence_number","","Increments the sequence number, indicating that a message with that\nnumber has been sent to the Thrift server.",39,null]],"paths":[[3,"TransportError"],[3,"ProtocolError"],[3,"ApplicationError"],[4,"Error"],[4,"TransportErrorKind"],[4,"ProtocolErrorKind"],[4,"ApplicationErrorKind"],[3,"TMessageIdentifier"],[3,"TStructIdentifier"],[3,"TFieldIdentifier"],[3,"TListIdentifier"],[3,"TSetIdentifier"],[3,"TMapIdentifier"],[4,"TMessageType"],[4,"TType"],[3,"TBinaryInputProtocol"],[3,"TBinaryInputProtocolFactory"],[3,"TBinaryOutputProtocol"],[3,"TBinaryOutputProtocolFactory"],[3,"TCompactInputProtocol"],[3,"TCompactInputProtocolFactory"],[3,"TCompactOutputProtocol"],[3,"TCompactOutputProtocolFactory"],[3,"TMultiplexedOutputProtocol"],[3,"TStoredInputProtocol"],[8,"TInputProtocol"],[8,"TOutputProtocol"],[8,"TInputProtocolFactory"],[8,"TOutputProtocolFactory"],[3,"TSimpleServer"],[3,"TMultiplexedProcessor"],[8,"TProcessor"],[3,"TPassThruTransport"],[3,"TBufferedTransport"],[3,"TBufferedTransportFactory"],[3,"TFramedTransport"],[3,"TFramedTransportFactory"],[3,"TTcpTransport"],[8,"TTransportFactory"],[8,"TThriftClient"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["integer_encoding"] = {"doc":"","items":[[8,"FixedInt","integer_encoding","FixedInt provides encoding/decoding to and from fixed int representations.\nThe emitted bytestring contains the bytes of the integer in little-endian order.",null,null],[10,"required_space","","Returns how many bytes are required to represent the given type.",0,{"inputs":[],"output":{"name":"usize"}}],[10,"encode_fixed","","Encode a value into the given slice.",0,null],[10,"decode_fixed","","Decode a value from the given slice.",0,null],[11,"encode_fixed_vec","","Helper: Encode the value and return a Vec.",0,null],[11,"decode_fixed_vec","","Helper: Decode the value from the Vec.",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[8,"VarInt","","Varint (variable length integer) encoding, as described in\nhttps://developers.google.com/protocol-buffers/docs/encoding.\nUses zigzag encoding (also described there) for signed integer representation.",null,null],[10,"required_space","","Returns the number of bytes this number needs in its encoded form.",1,null],[10,"decode_var","","Decode a value from the slice. Returns the value and the number of bytes read from the\nslice (can be used to read several consecutive values from a big slice)",1,null],[10,"encode_var","","Encode a value into the slice.",1,null],[11,"decode_var_vec","","Helper: (bit useless) - Decode value from the Vec.",1,null],[11,"encode_var_vec","","Helper: Encode a value and return the encoded form as Vec.",1,null],[8,"VarIntReader","","A trait for reading VarInts from any other `Reader`.",null,null],[10,"read_varint","","Returns either the decoded integer, or an error.",2,null],[8,"FixedIntReader","","A trait for reading FixedInts from any other `Reader`.",null,null],[10,"read_fixedint","","Read a fixed integer from a reader. How many bytes are read depends on `FI`.",3,null],[8,"VarIntWriter","","A trait for writing integers in VarInt encoding to any `Write` type.",null,null],[10,"write_varint","","",4,null],[8,"FixedIntWriter","","A trait for writing integers without encoding (i.e. `FixedInt`) to any `Write` type.",null,null],[10,"write_fixedint","","",5,null],[11,"encode_fixed_vec","","Helper: Encode the value and return a Vec.",0,null],[11,"decode_fixed_vec","","Helper: Decode the value from the Vec.",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"decode_var_vec","","Helper: (bit useless) - Decode value from the Vec.",1,null],[11,"encode_var_vec","","Helper: Encode a value and return the encoded form as Vec.",1,null]],"paths":[[8,"FixedInt"],[8,"VarInt"],[8,"VarIntReader"],[8,"FixedIntReader"],[8,"VarIntWriter"],[8,"FixedIntWriter"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["try_from"] = {"doc":"","items":[[4,"TryFromIntError","try_from","Error which occurs when conversion from one integer type to another fails.",null,null],[13,"Overflow","","",0,null],[13,"Underflow","","",0,null],[4,"Void","","Error type used when conversion is infallible.\nThe never type (`!`) will replace this when it is available in stable Rust.",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[8,"TryFrom","","",null,null],[16,"Err","","",1,null],[10,"try_from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"TryInto","","",null,null],[16,"Err","","",2,null],[10,"try_into","","",2,null],[11,"fmt","","",3,null],[11,"eq","","",3,null]],"paths":[[4,"TryFromIntError"],[8,"TryFrom"],[8,"TryInto"],[4,"Void"]]};
initSearch(searchIndex);
